
Schema::create('Matiere', function (Blueprint $table) {
            $table->id();
            $table->string('nom');
            $table->string('unite_minimale'); // Changé de enum à string
            $table->string('unite_classique');
            $table->decimal('quantite_par_unite', 10, 3);
            $table->decimal('quantite', 10, 2);
            $table->decimal('prix_unitaire', 10, 2);
            $table->decimal('prix_par_unite_minimale', 10, 4);
            $table->timestamps();
  


        Schema::create('Produit_fixes', function (Blueprint $table) {
            $table->id('code_produit');  // Utilise id() qui crée un unsignedBigInteger AUTO_INCREMENT
            $table->string('nom', 50);
            $table->smallInteger('prix');
            $table->string('categorie');
            $table->timestamps();
        });
  

        Schema::create('avance_salaires', function (Blueprint $table) {
            $table->id();
            $table->foreignId('id_employe')->constrained('users')->onDelete('cascade');
            $table->decimal('sommeAs', 10, 2);
            $table->boolean('flag')->default(false);
            $table->boolean('retrait_demande')->default(false);
            $table->boolean('retrait_valide')->default(false);
            $table->date('mois_as')->default(now());
            $table->timestamps();
            
            // Un employé ne peut avoir qu'une seule avance en cours
            $table->unique('id_employe');
        });
    }

        Schema::create('salaires', function (Blueprint $table) {
            $table->id();
            $table->foreignId('id_employe')->constrained('users')->onDelete('cascade');
            $table->decimal('somme', 10, 2);
            $table->boolean('flag')->default(false);
            $table->boolean('retrait_demande')->default(false);
            $table->boolean('retrait_valide')->default(false);
            $table->date('mois_salaire')->default(now());
            $table->timestamps();

   
        Schema::create('bags', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->decimal('price', 10, 2);
            $table->integer('stock_quantity');
            $table->integer('alert_threshold')->default(100);
            $table->timestamps();
    
        Schema::create('bag_transactions', function (Blueprint $table) {
            $table->id();
            $table->foreignId('bag_id')->constrained()->onDelete('cascade');
            $table->enum('type', ['received', 'sold']);
            $table->integer('quantity');
            $table->date('transaction_date');
            $table->timestamps();
  
  
            Schema::create('depenses', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('auteur');
            $table->string('nom');
            $table->decimal('prix', 15, 2);
            $table->enum('type', ['achat_matiere', 'livraison_matiere', 'reparation', 'depense_fiscale', 'autre']);
            $table->unsignedBigInteger('idm')->nullable();
            $table->date('date');
            $table->boolean('valider')->default(true);
            $table->timestamps();
            $table->foreign('auteur')->references('id')->on('users')->onDelete('cascade');
            $table->foreign('idm')->references('id')->on('Matiere')->onDelete('set null');
  
            Schema::create('features', function (Blueprint $table) {
            $table->id();
            $table->string('code')->unique(); // Code unique pour identifier la fonctionnalité
            $table->string('name'); // Nom descriptif de la fonctionnalité
            $table->string('category'); // Catégorie: all_employees, producers, sellers, cashiers, production_manager, structure
            $table->text('description')->nullable(); // Description détaillée
            $table->boolean('active')->default(true); // Statut d'activation (true par défaut)
            $table->timestamps();
   

        Schema::create('Versement_chef', function (Blueprint $table) {
            $table->unsignedBigInteger('code_vc')->autoIncrement();
            $table->unsignedBigInteger('verseur');
            $table->string('libelle', 255);
            $table->integer('montant');
            $table->boolean('status')->default(0); // 0: En attente, 1: Validé
            $table->date('date');
            $table->foreign('verseur')->references('id')->on('users')->onDelete('cascade');
            $table->timestamps();
        });
    }

    Schema::create('Produit_recu', function (Blueprint $table) {
            $table->unsignedBigInteger('code_produit')->autoIncrement();
            $table->unsignedBigInteger('pointeur');
            $table->unsignedBigInteger('produit');
            $table->smallInteger('prix');
            $table->smallInteger('quantite');
            $table->date('date');
            $table->foreign('pointeur')->references('id')->on('users')->onDelete('cascade');
            $table->foreign('produit')->references('code_produit')->on('Produit_fixes')->onDelete('cascade');
            $table->timestamps();
        });
    }

   

        Schema::create('Evenement', function (Blueprint $table) {
            $table->unsignedBigInteger('code_even')->autoIncrement();
            $table->string('libelle', 1000);
            $table->date('date');
            $table->timestamps();
        });
  

    Schema::create('Utilisation', function (Blueprint $table) {
        $table->id();
        $table->string('id_lot', 20);
        $table->index('id_lot');
        $table->unsignedBigInteger('produit');  // Type correspond maintenant à code_produit
        $table->unsignedBigInteger('matierep');
        $table->unsignedBigInteger('producteur');
        $table->decimal('quantite_produit', 10, 2);
        $table->decimal('quantite_matiere', 10, 3);
        $table->string('unite_matiere');
        $table->timestamps();

        $table->foreign('produit')->references('code_produit')->on('Produit_fixes');
        $table->foreign('matierep')->references('id')->on('Matiere');
        $table->foreign('producteur')->references('id')->on('users');
    });
}


Schema::create('Horaire', function (Blueprint $table) {
            $table->bigInteger('id')->autoIncrement();
            $table->unsignedBigInteger('employe')->nullable();
            $table->dateTime('arrive')->nullable();
            $table->dateTime('depart')->nullable();
            $table->foreign('employe')->references('id')->on('users')->onDelete('cascade');
            $table->timestamps();
        });
    }


        Schema::create('Commande', function (Blueprint $table) {
            $table->bigInteger('id')->autoIncrement();
            $table->string('libelle', 50);
            $table->dateTime('date_commande');
            $table->unsignedBigInteger('produit')->nullable();
            $table->integer('quantite');
            $table->foreign('produit')->references('code_produit')->on('Produit_fixes')->onDelete('cascade');
            $table->string('categorie');
            $table->boolean('valider')->default(false);
            $table->timestamps();
        });
    }

   

        Schema::create('Complexe', function (Blueprint $table) {
            $table->unsignedBigInteger('id_comp');
            $table->string('nom', 50);
            $table->string('localisation', 50);
            $table->bigInteger('revenu_mensuel')->default(0);
            $table->bigInteger('revenu_annuel')->default(0);
            $table->bigInteger('solde')->default(0);
            $table->bigInteger('caisse_sociale')->nullable()->default(0);
            $table->bigInteger('valeur_caisse_sociale')->default(0);
            $table->timestamps();
   
            Schema::create('Daily_assignments', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('chef_production');
            $table->unsignedBigInteger('producteur');
            $table->unsignedBigInteger('produit');
            $table->integer('expected_quantity');
            $table->foreign('produit')->references('code_produit')->on('Produit_fixes')->onDelete('cascade');
            $table->foreign('chef_production')->references('id')->on('users')->onDelete('cascade');
            $table->foreign('producteur')->references('id')->on('users')->onDelete('cascade');
            $table->date('assignment_date');
            $table->Integer('status');
            $table->timestamps();
        });
    

        Schema::create('Production_suggerer_par_jour', function (Blueprint $table) {
            $table->id('id');
            $table->unsignedBigInteger('produit');
            $table->integer('quantity');
            $table->foreign('produit')->references('code_produit')->on('Produit_fixes');
            $table->string('day');
            $table->timestamps();
        });
    }


        Schema::create('transaction_ventes', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('produit');
            $table->unsignedBigInteger('serveur');
            $table->Integer('quantite');
            $table->Integer('prix');
            $table->date('date_vente');
            $table->string('type');
            $table->string('monnaie')->nullable();
            $table->timestamps();
            $table->foreign('produit')->references('code_produit')->on('Produit_fixes')
            ->onDelete('cascade');
            $table->foreign('serveur')->references('id')->on('users')->onDelete('cascade');
        });
  
        Schema::create('Message', function (Blueprint $table) {
            $table->id();
            $table->string('message');
            $table->string('type');
            $table->date('date_message');
            $table->string('name');
            $table->boolean('read')->default(false);
            $table->timestamps();
        });
  
        Schema::create('Acouper', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('id_employe');
            $table->bigInteger('manquants')->default(0);
            $table->bigInteger('remboursement')->default(0);
            $table->bigInteger('pret')->default(0);
            $table->integer('caisse_sociale')->default(0);
            $table->date('date');
            $table->foreign('id_employe')->references('id')->on('users')->onDelete('cascade');
            $table->timestamps();
        });
    }

 

        Schema::create('Prime', function (Blueprint $table) {
            $table->id();
            $table->foreignId('id_employe')->constrained('users')->onDelete('cascade');
            $table->string('libelle');
            $table->integer('montant');
            $table->timestamps();
        });
  
        Schema::create('Matiere_recommander', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('produit');
            $table->unsignedBigInteger('matierep');
            $table->Integer('quantitep');//qquantite produit
            $table->decimal('quantite', 10, 3);
            $table->string('unite');
            $table->timestamps();
            $table->foreign('produit')->references('code_produit')->on('Produit_fixes');
            $table->foreign('matierep')->references('id')->on('Matiere');
   

        Schema::create('Reservations_mp', function (Blueprint $table) {
            $table->id();
            $table->foreignId('producteur_id')->constrained('users');
            $table->foreignId('matiere_id')->constrained('Matiere');
            $table->decimal('quantite_demandee', 10, 3);
            $table->string('unite_demandee');
            $table->enum('statut', ['en_attente', 'approuvee', 'refusee'])->default('en_attente');
            $table->text('commentaire')->nullable();
            $table->timestamps();
  
            Schema::create('assignations_matiere', function (Blueprint $table) {
        $table->id();
        $table->foreignId('producteur_id')->constrained('users');
        $table->foreignId('matiere_id')->constrained('Matiere');
        $table->decimal('quantite_assignee', 10, 3);
        $table->string('unite_assignee');
        $table->decimal('quantite_restante', 10, 3);
        $table->timestamp('date_limite_utilisation')->nullable();
        $table->timestamps();

};
